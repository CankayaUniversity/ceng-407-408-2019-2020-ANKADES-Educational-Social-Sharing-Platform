# Generated by Django 3.0.2 on 2020-02-19 20:43

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Description')),
                ('image', models.FileField(blank=True, default='default-user-image.png', null=True, upload_to='')),
                ('is_admin', models.BooleanField(blank=True, default=False, null=True, verbose_name='Kullanıcı Admin mi?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountSocialMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Sosyal Medya Id')),
                ('name', models.CharField(max_length=100, verbose_name='Sosyal Medya Adı')),
                ('name_slug', models.CharField(max_length=254, verbose_name='Sosyal Medya Slug')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='MainGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Main Group Id')),
                ('name', models.CharField(max_length=100, verbose_name='İzin Adı')),
                ('name_slug', models.CharField(max_length=254, unique=True, verbose_name='Unique İzin Adı')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
            ],
        ),
        migrations.CreateModel(
            name='MainPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='İzin Id')),
                ('name', models.CharField(max_length=100, verbose_name='İzin Adı')),
                ('name_slug', models.CharField(max_length=254, unique=True, verbose_name='Unique İzin Adı')),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='İzin Açıklaması')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='SocialMediaUrl',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Sosyal Medya Url Id')),
                ('address', models.URLField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('social_media_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.AccountSocialMedia')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='AccountHasPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Hesap İzin Id')),
                ('permission_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='account.MainPermission', verbose_name='Bağlı Olduğu İzin')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Bağlı Olduğu Hesap')),
            ],
        ),
        migrations.CreateModel(
            name='AccountGroupPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Account Group Permission Id')),
                ('group_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='account.MainGroup', verbose_name='Bağlı Olduğu Grup')),
                ('permission_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='account.MainPermission', verbose_name='Bağlı Olduğu İzinler')),
            ],
        ),
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Account Group Id')),
                ('group_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='account.MainGroup', verbose_name='Bağlı Olduğu Grup')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Bağlı Olduğu Hesap')),
            ],
        ),
        migrations.CreateModel(
            name='AccountActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Kurs Id')),
                ('act_title', models.CharField(max_length=254, verbose_name='Başlık')),
                ('act_app', models.CharField(max_length=254, verbose_name='Uygulama')),
                ('act_desc', models.CharField(max_length=254, verbose_name='Açıklama')),
                ('act_method', models.CharField(max_length=254, verbose_name='Method Türü')),
                ('act_created_date', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulduğu Tarih')),
                ('act_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Oluşturan Kişi')),
            ],
            options={
                'ordering': ['-act_created_date'],
            },
        ),
    ]
